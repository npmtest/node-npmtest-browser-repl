{"/home/travis/build/npmtest/node-npmtest-browser-repl/test.js":"/* istanbul instrument in package npmtest_browser_repl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-repl/lib.npmtest_browser_repl.js":"/* istanbul instrument in package npmtest_browser_repl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browser_repl = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browser_repl = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-repl/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browser-repl && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browser_repl */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browser_repl\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browser_repl.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browser_repl.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browser_repl.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browser_repl.__dirname + '/lib.npmtest_browser_repl.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-repl/node_modules/browser-repl/repl.js":"#!/usr/bin/env node\n\nif (!process.stdout.isTTY) {\n  console.error('Must run in a TTY');\n  process.exit(1);\n}\n\nif (!process.env.SAUCE_ACCESS_KEY || !process.env.SAUCE_USERNAME) {\n  console.error('Please configure $SAUCE_ACCESS_KEY and $SAUCE_USERNAME in your shell');\n  console.error('Sign up at saucelabs.com');\n  process.exit(1);\n}\n\nvar wd = require('wd');\nvar env = process.env;\nvar repl = require('repl');\nvar args = process.argv.slice(2);\nvar argv = require('minimist')(args);\nvar sio = require('socket.io');\nvar ngrok = require('ngrok').connect;\nvar join = require('path').join;\nvar http = require('http').Server;\nvar express = require('express');\n\n// config\nvar config = require('./browsers');\nvar browsers = config.browsers;\nvar platforms = config.platforms;\n\n// parse args\nif (2 == argv._.length) platform = argv._.pop();\nvar str = argv._.join('');\nvar parts = str.match(/([a-z]+) *(\\d+(\\.\\d+)?)?/);\nif (!parts) return usage();\n\n// locate browser\nvar browser = browsers[str] || browsers[parts[1]];\nif (!browser) return usage();\nvar version = parts[2] || browser.version;\nvar platform = platforms[platform || browser.platform];\n\n\n// app\nvar app = express();\nvar srv = http(app);\napp.get('/', function(req, res){\n  res.send([\n    '<!DOCTYPE html>',\n    '<script>options = ' + JSON.stringify(argv) + ';</script>',\n    '<script src=\"/build.js\"></script>'\n  ].join('\\n'));\n});\napp.use(express.static(join(__dirname, 'static')));\n\nvar io = sio(srv);\nvar socket;\n\nsetup();\n\nfunction setup(){\n  console.log('… setting up tunnel');\n  srv.listen(function(){\n    ngrok(srv.address().port, function(err, url){\n      if (err) {\n        console.error('… error setting up reverse tunnel');\n        console.error(err.stack);\n        return;\n      }\n\n      console.log('… booting up \\033[96m'\n        + browser.name + '\\033[39m (' + (version || 'latest')\n        + ') on ' + platform);\n      spawn(url);\n    });\n    // let `error` throw\n  });\n}\n\nfunction spawn(url){\n  var user = env.SAUCE_USERNAME;\n  var key = env.SAUCE_ACCESS_KEY;\n  var vm = wd.remote('ondemand.saucelabs.com', 80, user, key);\n\n  var isAndroid = browser.name == \"android\";\n  var isiPhone = /^ip(hone|ad)$/.test(browser.name);\n\n  var opts = {\n    browserName: browser.name,\n    platform : platform,\n    version : version ? version : undefined,\n    deviceName : isAndroid ? \"Android Emulator\" : isiPhone ? \"iPhone Simulator\" : undefined,\n    'device-orientation' : isAndroid || isiPhone ? 'portrait' : undefined,\n    'record-video' : false,\n    'record-screenshots' : false,\n  };\n\n  vm.init(opts, function(err, sessionid, client){\n    if (err) throw err;\n    if (client) console.log('… connected to', client.browserName, client.version);\n    vm.get(url, function(err){\n      if (err) throw err;\n\n      // set up a heartbeat to keep session alive\n      setInterval(function(){\n        vm.eval('', function(err){\n          if (err) throw err;\n        });\n      }, 30000);\n\n      // socket io `connection` should fire now\n    });\n  });\n\n  io.on('connection', function(s){\n    socket = s;\n    socket.on('disconnect', function(){\n      console.log('socket disconnected');\n      process.exit(1);\n    });\n    start();\n  });\n}\n\nfunction usage(){\n  console.error('');\n  console.error('usage: repl <browser>[version] [platform]');\n  console.error('');\n  console.error('options:');\n  console.error(' -h: this message');\n  console.error(' -k: no remote `console` override');\n  console.error('');\n  console.error('examples:');\n  console.error(' $ repl ie6     # ie 6');\n  console.error(' $ repl chrome  # chrome latest');\n  console.error('');\n  console.error('available browsers: ');\n\n  var browsernames = {};\n  Object.keys(browsers).map(function(k){ return browsers[k] }).forEach(function(k){ browsernames[k.name] = true; });\n\n  Object.keys(browsernames).forEach(function(name){\n      console.error(\n        ' ' + name + ':   ',\n        Object.keys(browsers).filter(function(val){ return browsers[val].name == name }).join('  ')\n      );\n  });\n\n  console.error('\\navailable platforms: \\n  ' + Object.keys(platforms).join('  '));\n  console.error('');\n  process.exit(1);\n}\n\nfunction start(){\n  console.log('… ready!');\n  var isAnsiReadlineOK = 'stripVTControlCharacters' in require('readline');\n\n  var cmd = repl.start({\n    prompt: isAnsiReadlineOK ? '\\u001b[96m' + str + ' › \\u001b[39m' : str + ' › ',\n    eval: function(cmd, ctx, file, fn){\n      socket.emit('run', cmd, function(err, data){\n        if (err) {\n          // we have to create a synthetic SyntaxError if one occurred in the\n          // browser because the REPL special-cases that error\n          // to display the \"more\" prompt\n          if (\n            // most browsers set the `name` to \"SyntaxError\"\n            ('SyntaxError' == err.name &&\n              // firefox\n              ('syntax error' == err.message ||\n               'function statement requires a name' == err.message ||\n              // iOS\n               'Parse error' == err.message ||\n              // opera\n               /syntax error$/.test(err.message) ||\n               /expected (.*), got (.*)$/.test(err.message) ||\n              // safari\n               /^Unexpected token (.*)$/.test(err.message)\n              )\n            ) ||\n            // old IE doens't even have a \"name\" property :\\\n            ('Syntax error' == err.message || /^expected /i.test(err.message))\n          ) {\n            err = new SyntaxError('Unexpected end of input');\n          } else {\n            // any other `err` needs to be converted to an `Error` object\n            // with the given `err`s properties copied over\n            var e = new Error();\n\n            // force an empty stack trace on the server-side... in the case where\n            // the client-side didn't send us a `stack` property (old IE, safari),\n            // it's confusing to see a server-side stack trace.\n            e.stack = '';\n\n            for (var i in err) {\n              e[i] = err[i];\n            }\n\n            // firefox and opera, in particular, doesn't include the \"name\"\n            // or \"message\" in the stack trace\n            var prefix = e.name;\n            if (e.message) prefix += ': ' + e.message;\n            if (e.stack.substring(0, prefix.length) != prefix) {\n              e.stack = prefix + '\\n' + e.stack;\n            }\n\n            err = e;\n          }\n        }\n        // We're intentionally passing the successful \"data\" response as the\n        // `err` argument to the eval function. This is because the `data` is\n        // actually a properly formatted String output from `util.inspect()` run\n        // on the client-side, with proper coloring, etc. coincidentally, if we\n        // pass that as the `err` argument then node's `repl` module will simply\n        // console.log() the formatted string for us, which is what we want\n        fn(err || data);\n      });\n    }\n  });\n\n  socket.on('global err', function(message, url, linenumber){\n    console.log('Global error: ', message, url, linenumber);\n  });\n\n  socket.on('console', function(method, args){\n    console[method].apply(console, args);\n  });\n\n  cmd.on('exit', function(){\n    process.exit(0);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-browser-repl/node_modules/browser-repl/client.js":"var io = require('socket.io-client');\nvar map = require('array-map');\nvar each = require('foreach');\nvar toArray = require('to-array');\nvar inspect = require('util-inspect');\nvar socket = io();\n\n// make `console` remote\nif (!global.options.k) {\n  global.console = {};\n  each(['log', 'info', 'warn', 'error', 'debug'], function(m){\n    global.console[m] = function(){\n      var args = toArray(arguments);\n      socket.emit('console', m, map(args, function(a){\n        return inspect(a, { colors: true });\n      }));\n    };\n  });\n}\n\nsocket.on('run', function(js, fn){\n  try {\n    // eval in the global scope (http://stackoverflow.com/a/5776496/376773)\n    var rtn = (function() { return eval.apply(this, arguments); })(js);\n\n    // save the previous value as `_`. matches node's main REPL behavior\n    global._ = rtn;\n\n    fn(null, inspect(rtn, { colors: true }));\n  } catch(e) {\n    // we have to create a \"flattened\" version of the `e` Error object,\n    // for JSON serialization purposes\n    var err = {};\n    for (var i in e) err[i] = e[i];\n    err.message = e.message;\n    err.stack = e.stack;\n    // String() is needed here apparently for IE6-8 which throw an error deep in\n    // socket.io that is hard to debug through SauceLabs remotely. For some\n    // reason, toString() here bypasses the bug...\n    err.name = String(e.name);\n    fn(err);\n  }\n});\n\nwindow.onerror = function(message, url, linenumber){\n  socket.emit('global err', message, url, linenumber);\n};\n"}